{"version":3,"sources":["Components/MailList/MailList.module.scss","Components/Folders/Folders.module.scss","Components/MailBody/MailBody.module.scss","Components/Header/Header.module.scss","UI/Badge/Badge.module.scss","Assets/Images/nomail.svg","Assets/Images/envelope.svg","Utils/models.tsx","Components/Header/Header.tsx","Store/MailContext.tsx","UI/Badge/Badge.tsx","Components/Folders/Folders.tsx","Components/MailList/MailList.tsx","Components/MailBody/MailBody.tsx","Components/Root.tsx","App.tsx","serviceWorker.ts","Store/MailStore.tsx","Store/MailProvider.tsx","index.tsx"],"names":["module","exports","FOLDER_TYPES","Header","props","className","classes","wrapper","icon","faWindows","iconStyles","size","titleStyles","MailContext","createContext","Badge","badgeStyles","children","Folders","observer","mailData","useContext","unreadCount","getUnreadCount","setFolder","selectedFolder","useState","contentOpen","setContentOpen","caratClickHandler","useCallback","prevState","folderJSX","useMemo","Object","keys","map","el","index","type","INBOX","faInbox","SPAM","faBan","DELETED","faTrashAlt","OTHER","faFolder","onClick","visited","innerIconStyles","search","input","placeholder","onChange","e","console","log","target","value","handleSearch","navigationSection","categorySection","faCaretRight","iconRotated","join","MailList","setID","deleteTheMail","readTheMail","selectedID","setFlags","flagIds","flagFilter","toggleFlagFilter","getMailData","getFilteredData","dropDownState","setDropDownState","mailOnClickHandler","mID","deleteClickHandler","mId","stopPropagation","envelopeClickHandler","flagClickHandler","onClickDropDown","onBlurDropDown","toggleOnFilterHandler","toggleOffFilterHandler","generateMailList","unread","notVisited","selected","bind","iconTitleWrapper","iconWrapper","iconDeleteStyles","faEnvelopeOpen","faEnvelope","iconEnvelopeStyles","faFlag","includes","iconFlagSelectedStyles","iconFlagStyles","subjectContent","subject","content","replace","flagSpan","faWindowClose","onBlur","tabIndex","faCaretDown","style","display","length","fallBackStyles","src","noMail","alt","toLowerCase","MailBody","mailJSON","find","mailContent","noMailContentWrapper","envelope","mainBody","profileHeader","outerFlex","faUserCircle","profileIconStyles","innerFlex","deleteIconStyles","dangerouslySetInnerHTML","__html","dangerousDiv","Root","App","Boolean","window","location","hostname","match","MailStore","observable","shallow","makeObservable","this","inboxData","spamData","deletedData","otherData","localStorageSync","data","toJS","filter","action","id","folderName","toggle","filteredDataClone","syncTheData","deletedMail","push","filteredData","flagIdsClone","Set","has","delete","add","Array","from","val","computed","_this","firstRun","autorun","existingStore","localStorage","getItem","set","JSON","parse","inboxJSONData","spamJSONData","setItem","stringify","mailStoreObj","MailProvider","Provider","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.98e4361a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"MailList_wrapper__37c4h\",\"flagSpan\":\"MailList_flagSpan__3TZq8\",\"selected\":\"MailList_selected__3xCVM\",\"notVisited\":\"MailList_notVisited__-Ofss\",\"iconTitleWrapper\":\"MailList_iconTitleWrapper__3czDh\",\"mId\":\"MailList_mId__2767z\",\"iconWrapper\":\"MailList_iconWrapper__1rL8A\",\"iconStyles\":\"MailList_iconStyles__WXzKS\",\"iconFlagSelectedStyles\":\"MailList_iconFlagSelectedStyles__2X2B2\",\"iconDeleteStyles\":\"MailList_iconDeleteStyles__3fULG\",\"iconEnvelopeStyles\":\"MailList_iconEnvelopeStyles__qDq4O\",\"iconFlagStyles\":\"MailList_iconFlagStyles__1jCND\",\"subjectContent\":\"MailList_subjectContent__31dfP\",\"fallBackStyles\":\"MailList_fallBackStyles__1TI6j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"search\":\"Folders_search__1UmtU\",\"input\":\"Folders_input__1C3kc\",\"wrapper\":\"Folders_wrapper__2fBsj\",\"navigationSection\":\"Folders_navigationSection__2C4Gc\",\"categorySection\":\"Folders_categorySection__2k6Om\",\"visited\":\"Folders_visited__3isMd\",\"iconStyles\":\"Folders_iconStyles__185L6\",\"iconRotated\":\"Folders_iconRotated__3POPE\",\"innerIconStyles\":\"Folders_innerIconStyles__21c72\",\"footer\":\"Folders_footer__3TcWl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"MailBody_wrapper__3sxg3\",\"noMailContentWrapper\":\"MailBody_noMailContentWrapper__Rvbwq\",\"mainBody\":\"MailBody_mainBody__3o7-Z\",\"profileHeader\":\"MailBody_profileHeader__PY4PY\",\"outerFlex\":\"MailBody_outerFlex__2EL7e\",\"innerFlex\":\"MailBody_innerFlex__1DrG5\",\"profileIconStyles\":\"MailBody_profileIconStyles__3q9tf\",\"deleteIconStyles\":\"MailBody_deleteIconStyles__22p0z\",\"dangerousDiv\":\"MailBody_dangerousDiv__37SXL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Header_wrapper__3QX8K\",\"titleStyles\":\"Header_titleStyles__DOxA6\",\"iconStyles\":\"Header_iconStyles__1AVIl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"badgeStyles\":\"Badge_badgeStyles__2qj3q\"};","module.exports = __webpack_public_path__ + \"static/media/nomail.d9d021d5.svg\";","module.exports = __webpack_public_path__ + \"static/media/envelope.0b6ed872.svg\";","export interface mailStructure {\n    mId : string,\n    unread : boolean,\n    subject : string,\n    content : string\n}\n\nexport enum FOLDER_TYPES {INBOX = \"INBOX\", SPAM = \"SPAM\", DELETED = \"DELETED\", OTHER = \"OTHER FOLDER\"}","import React from \"react\";\nimport classes from \"./Header.module.scss\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faWindows } from \"@fortawesome/free-brands-svg-icons\";\n\n// MAIN HEADER\nconst Header: React.FC = (props) => {\n  return (\n    <nav className={classes.wrapper}>\n      <FontAwesomeIcon\n        icon={faWindows}\n        className={classes.iconStyles}\n        size=\"lg\"\n      ></FontAwesomeIcon>\n      <span className={classes.titleStyles}>Outlook Mail</span>\n    </nav>\n  );\n};\n\nexport default Header;\n","import {createContext} from \"react\";\nimport {MailStore} from './../Store/MailStore';\n\nexport const MailContext = createContext<MailStore>({} as MailStore);\n","import React from 'react';\nimport classes from './Badge.module.scss';\n\nconst Badge: React.FC<React.PropsWithChildren<{}>> = props => {\n    return <span className={classes.badgeStyles}>{props.children}</span>\n}\n\nexport default Badge;","import React, { useState, useCallback, useContext, useMemo } from \"react\";\nimport classes from \"./Folders.module.scss\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faCaretRight,\n  faInbox,\n  faBan,\n  faFolder,\n  faTrashAlt,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { observer } from \"mobx-react-lite\";\nimport { MailContext } from \"./../../Store/MailContext\";\nimport Badge from \"./../../UI/Badge/Badge\";\nimport { FOLDER_TYPES } from \"./../../Utils/models\";\n\n// FOLDERS DISPLAY - LHS\nconst Folders: React.FC = observer(() => {\n  // FETCHING DATA FROM STORE\n  const mailData = useContext(MailContext);\n  const unreadCount = mailData.getUnreadCount;\n  const { setFolder, selectedFolder } = mailData;\n\n  // STATE FOR OPENING THE CARAT - FOLDER COLLAPSIBLE\n  const [contentOpen, setContentOpen] = useState<boolean>(true);\n\n  // FOLDER TOGGLE HANDLER\n  const caratClickHandler = useCallback(() => {\n    setContentOpen((prevState) => {\n      return !prevState;\n    });\n  }, [setContentOpen]);\n\n  // CREATING THE FOLDER NAME AND UNREAD COUNT JSX\n  const folderJSX = useMemo(() => {\n    return Object.keys(FOLDER_TYPES).map((el, index) => {\n      let type = FOLDER_TYPES[el as keyof typeof FOLDER_TYPES];\n      let icon = null;\n      switch (type) {\n        case FOLDER_TYPES.INBOX:\n          icon = faInbox;\n          break;\n        case FOLDER_TYPES.SPAM:\n          icon = faBan;\n          break;\n        case FOLDER_TYPES.DELETED:\n          icon = faTrashAlt;\n          break;\n        case FOLDER_TYPES.OTHER:\n          icon = faFolder;\n          break;\n        default:\n          icon = faInbox;\n          break;\n      }\n      return (\n        <li\n          onClick={() => {\n            setFolder(type);\n          }}\n          className={selectedFolder === type ? classes.visited : \"\"}\n        >\n          <span>\n            <FontAwesomeIcon icon={icon} className={classes.innerIconStyles} />{\" \"}\n            {type}{\" \"}\n          </span>\n          {unreadCount[index] > 0 && <Badge>{unreadCount[index]}</Badge>}\n        </li>\n      );\n    });\n  }, [unreadCount, selectedFolder, setFolder]);\n\n  const handleSearch = (e: any) => {\n    console.log(e.target.value);\n  };\n  return (\n    <>\n      <div className={classes.search}>\n        <input\n          className={classes.input}\n          type=\"text\"\n          placeholder=\"Search Mail and People\"\n          onChange={(e) => handleSearch(e)}\n        />\n      </div>\n      <div className={classes.wrapper}>\n        <nav className={classes.navigationSection}>\n          <div className={classes.categorySection} onClick={caratClickHandler}>\n            <FontAwesomeIcon\n              icon={faCaretRight}\n              className={[\n                classes.iconStyles,\n                contentOpen && classes.iconRotated,\n              ].join(\" \")}\n              size=\"lg\"\n            />\n            FOLDERS\n          </div>\n          {contentOpen && <ul>{folderJSX}</ul>}\n        </nav>\n      </div>\n    </>\n  );\n});\n\nexport default Folders;\n","import React, { useContext, useCallback, useState } from \"react\";\nimport classes from \"./MailList.module.scss\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCaretDown } from \"@fortawesome/free-solid-svg-icons\";\nimport { observer } from \"mobx-react-lite\";\nimport { MailContext } from \"./../../Store/MailContext\";\nimport {\n  faTrashAlt,\n  faEnvelope,\n  faEnvelopeOpen,\n  faFlag,\n  faWindowClose,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport noMail from \"./../../Assets/Images/nomail.svg\";\nimport { FOLDER_TYPES } from \"./../../Utils/models\";\n\n// MAIL LIST : LISTS ALL THE MAILS BASED ON SELECTION FROM FOLDERS\nconst MailList: React.FC = observer((props) => {\n  // FETCHING DATA FROM STORE\n  const mailData = useContext(MailContext);\n  const {\n    setID,\n    deleteTheMail,\n    selectedFolder,\n    readTheMail,\n    selectedID,\n    setFlags,\n    flagIds,\n    flagFilter,\n    toggleFlagFilter,\n    getMailData,\n    getFilteredData,\n  } = mailData;\n\n  // DROPDOWN STATE\n  const [dropDownState, setDropDownState] = useState<boolean>(false);\n\n  // MAIL CLICK HANDLER TO DISPLAY DATA ON RHS\n  const mailOnClickHandler = useCallback(\n    (mID: string) => {\n      setID(mID);\n      readTheMail(mID);\n    },\n    [setID, readTheMail]\n  );\n\n  // DELETE CLICK HANDLER\n  const deleteClickHandler = useCallback(\n    (mId: string, e: React.MouseEvent<SVGSVGElement, MouseEvent>) => {\n      e.stopPropagation();\n      deleteTheMail(mId);\n    },\n    [deleteTheMail]\n  );\n\n  // ENVELOPE ICONS CLICK HANDLER TO TOGGLE READ AND UNREAD STATES\n  const envelopeClickHandler = useCallback(\n    (mId: string, e: React.MouseEvent<SVGSVGElement, MouseEvent>) => {\n      e.stopPropagation();\n      readTheMail(mId, true);\n    },\n    [readTheMail]\n  );\n\n  // FLAG CLICK HANDLER - TO TOGGLE FLAG STATUS\n  const flagClickHandler = useCallback(\n    (mId: string, e: React.MouseEvent<SVGSVGElement, MouseEvent>) => {\n      e.stopPropagation();\n      setFlags(mId);\n    },\n    [setFlags]\n  );\n\n  // TO OPEN THE DROPDOWN ON CLICK HANDLER\n  const onClickDropDown = useCallback(() => {\n    setDropDownState((prevState) => !prevState);\n  }, [setDropDownState]);\n\n  // TO CLOSE THE DROPDOWN WHEN CLICKED ELSEWHERE\n  const onBlurDropDown = useCallback(\n    (e: React.FocusEvent<HTMLDivElement>) => {\n      e.stopPropagation();\n      setDropDownState(false);\n    },\n    [setDropDownState]\n  );\n\n  // TO START THE FILTERING\n  const toggleOnFilterHandler = useCallback(() => {\n    toggleFlagFilter(true);\n    setDropDownState(false);\n  }, [toggleFlagFilter]);\n\n  // TO STOP THE FILTERING\n  const toggleOffFilterHandler = useCallback(() => {\n    toggleFlagFilter(false);\n    setDropDownState(false);\n  }, [toggleFlagFilter, setDropDownState]);\n\n  // GENERATING THE MAIL LIST - CHANGES BASED ON GENERAL OR FILTERED\n  const generateMailList = useCallback((): JSX.Element[] => {\n    return (flagFilter ? getFilteredData : getMailData).map((el, index) => {\n      return (\n        <li\n          className={[\n            el.unread ? classes.notVisited : \"\",\n            selectedID === el.mId ? classes.selected : \"\",\n          ].join(\" \")}\n          onClick={mailOnClickHandler.bind(null, el.mId)}\n        >\n          <div className={classes.iconTitleWrapper}>\n            <div className={classes.mId}>{el.mId}</div>\n            <span className={classes.iconWrapper}>\n              {selectedFolder !== FOLDER_TYPES.DELETED && (\n                <FontAwesomeIcon\n                  icon={faTrashAlt}\n                  size=\"sm\"\n                  className={[\n                    classes.iconStyles,\n                    classes.iconDeleteStyles,\n                  ].join(\" \")}\n                  onClick={deleteClickHandler.bind(null, el.mId)}\n                ></FontAwesomeIcon>\n              )}\n              <FontAwesomeIcon\n                icon={el.unread ? faEnvelopeOpen : faEnvelope}\n                size=\"sm\"\n                className={[\n                  classes.iconStyles,\n                  classes.iconEnvelopeStyles,\n                ].join(\" \")}\n                onClick={envelopeClickHandler.bind(null, el.mId)}\n              ></FontAwesomeIcon>\n              <FontAwesomeIcon\n                icon={faFlag}\n                size=\"sm\"\n                className={[\n                  classes.iconStyles,\n                  flagIds.includes(el.mId)\n                    ? classes.iconFlagSelectedStyles\n                    : \"\",\n                  classes.iconFlagStyles,\n                ].join(\" \")}\n                onClick={flagClickHandler.bind(null, el.mId)}\n              ></FontAwesomeIcon>\n            </span>\n          </div>\n          <div\n            className={[\n              classes.subjectContent,\n              el.unread && classes.notVisited,\n            ].join(\" \")}\n          >\n            {el.subject}\n          </div>\n          <div className={classes.subjectContent}>\n            {el.content.replace(/<.*?>/gi, \"\")}\n          </div>\n        </li>\n      );\n    });\n  }, [\n    getMailData,\n    getFilteredData,\n    flagFilter,\n    mailOnClickHandler,\n    deleteClickHandler,\n    envelopeClickHandler,\n    flagClickHandler,\n    selectedFolder,\n    selectedID,\n    flagIds,\n  ]);\n\n  // FALL BACK JSX WHEN NOTHING EXISTS\n  const fallBackJSX = (): JSX.Element => {\n    return (\n      <div className={classes.fallBackStyles}>\n        <img src={noMail} alt=\"nothing present here\" />\n        <span>Nothing in {mailData.selectedFolder.toLowerCase()}.</span>\n        <span>Looks empty over here!</span>\n      </div>\n    );\n  };\n\n  return (\n    <div className={classes.wrapper}>\n      <header>\n        <span>{mailData.selectedFolder}</span>\n        {flagFilter ? (\n          <span className={classes.flagSpan} onClick={toggleOffFilterHandler}>\n            Flagged <FontAwesomeIcon icon={faWindowClose}></FontAwesomeIcon>{\" \"}\n          </span>\n        ) : (\n          <div onBlur={onBlurDropDown} onClick={onClickDropDown} tabIndex={1}>\n            <span>\n              Filter <FontAwesomeIcon icon={faCaretDown} />\n            </span>\n            <section\n              style={{ display: dropDownState ? \"block\" : \"none\" }}\n              onClick={(e: any) => {\n                e.stopPropagation();\n              }}\n            >\n              <span onClick={toggleOnFilterHandler}>Flag</span>\n            </section>\n          </div>\n        )}\n      </header>\n      <main>\n        <ul>\n          {generateMailList().length ? generateMailList() : fallBackJSX()}\n        </ul>\n      </main>\n    </div>\n  );\n});\n\nexport default MailList;\n","import React, { useMemo, useContext, useCallback } from 'react';\nimport classes from './MailBody.module.scss';\nimport envelope from './../../Assets/Images/envelope.svg';\nimport { observer } from 'mobx-react-lite';\nimport { MailContext } from './../../Store/MailContext';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUserCircle, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { FOLDER_TYPES } from './../../Utils/models';\n\n// MAIL BODY\nconst MailBody: React.FC = observer(props => {\n\n    // FETCHING DATA FROM STORE\n    const mailData = useContext(MailContext);\n    const { getMailData, selectedID, selectedFolder, deleteTheMail, flagFilter, getFilteredData } = mailData;\n\n    // FETCHING THE INDIVIDUAL DETAILS\n    const mailJSON = useMemo(() => {\n        return (flagFilter ? getFilteredData :getMailData)!.find(el => el.mId === selectedID);\n    }, [getMailData, selectedID, getFilteredData, flagFilter])\n\n    // DELETE CLICK HANDLER\n    const deleteClickHandler = useCallback((mId: string | undefined, e: React.MouseEvent<SVGSVGElement, MouseEvent>) => {\n        if (mId) {\n            deleteTheMail(mId);\n        }\n    }, [deleteTheMail])\n\n    // CREATING THE MAIL BODY\n    const mailContent = useMemo<JSX.Element | null>(() => {\n        if (flagFilter ? getFilteredData.length :getMailData.length) {\n            if (!selectedID) {\n                return (\n                    <section className={classes.noMailContentWrapper}>\n                        <img src={envelope} alt=\"no img\" />\n                        <div>Select an item to read</div>\n                        <div>Nothing is selected !</div>\n                    </section>\n                )\n            }\n            else if (mailJSON) {\n                return (\n                    <div className={classes.mainBody}>\n                        <header className={classes.profileHeader}>\n                            <div className={classes.outerFlex}>\n                                <FontAwesomeIcon size=\"3x\" icon={faUserCircle} className={classes.profileIconStyles}></FontAwesomeIcon>\n                                <div className={classes.innerFlex}>\n                                    <span>{mailJSON?.mId}</span>\n                                    <span>{mailJSON?.subject}</span>\n                                </div>\n                            </div>\n                            {(selectedFolder !== FOLDER_TYPES.DELETED) && <FontAwesomeIcon size=\"sm\" icon={faTrashAlt} className={classes.deleteIconStyles} onClick={deleteClickHandler.bind(null, mailJSON?.mId)}></FontAwesomeIcon>}\n                        </header>\n                        <hr />\n\n                        <main>\n                            <div dangerouslySetInnerHTML={{ __html: mailJSON.content }} className={classes.dangerousDiv}></div>\n                        </main>\n                    </div>\n                )\n            }\n        }\n        return null;\n    }, [getMailData, selectedID, mailJSON, selectedFolder, deleteClickHandler, getFilteredData, flagFilter])\n\n    return (\n        <div className={classes.wrapper}>\n            {mailContent}\n        </div>\n    )\n})\n\nexport default MailBody;","import React from \"react\";\nimport \"./Root.scss\";\n\n// IMPORTING COMPONENTS\nimport Header from \"./Header/Header\";\nimport Folders from \"./Folders/Folders\";\nimport MailList from \"./MailList/MailList\";\nimport MailBody from \"./MailBody/MailBody\";\n\n// ROOT FOLDER\nconst Root: React.FC = (props) => {\n  return (\n    <div className=\"root-wrapper\">\n      <section className=\"root-header\">\n        <Header></Header>\n      </section>\n      <section className=\"root-folders\">\n        <Folders></Folders>\n      </section>\n      <section className=\"root-maillist\">\n        <MailList></MailList>\n      </section>\n      <section className=\"root-mailbody\">\n        <MailBody></MailBody>\n      </section>\n    </div>\n  );\n};\n\nexport default Root;\n","import React from 'react';\nimport './App.scss';\nimport Root from './Components/Root';\n\nvar App: React.FC = () => {\n  return (\n    <Root></Root>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { observable, action, makeObservable, toJS, computed } from 'mobx';\nimport { mailStructure, FOLDER_TYPES } from './../Utils/models';\nimport {localStorageSync} from './MailProvider'\n\nexport class MailStore {\n\n    @observable.shallow inboxData: mailStructure[];\n    @observable.shallow spamData: mailStructure[];\n    @observable.shallow deletedData: mailStructure[];\n    @observable.shallow otherData: mailStructure[];\n    @observable selectedID: string;\n    @observable selectedFolder: FOLDER_TYPES;\n    @observable flagIds: Array<string>;\n    @observable flagFilter: boolean;\n\n    constructor() {\n        makeObservable(this);\n        this.inboxData = [];\n        this.spamData = [];\n        this.deletedData = [];\n        this.otherData = [];\n        this.selectedID = \"\";\n        this.selectedFolder = FOLDER_TYPES.INBOX;\n        this.flagIds = [];\n        this.flagFilter = false;\n        localStorageSync(this);\n    }\n\n    // SET ID\n    @action\n    setID = (id: string) => {\n        this.selectedID = id;\n    }\n\n    // SET SELECTED FOLDER FOLDER\n    @action\n    setFolder = (folderName: FOLDER_TYPES) => {\n        this.selectedFolder = folderName;\n        this.selectedID = \"\";\n        this.flagFilter = false;\n    }\n\n    // MARK AS READ & UNREAD\n    @action\n    readTheMail = (mId: string, toggle: boolean = false,) => {\n        let filteredDataClone = this.getMailData.map(el => {\n            if (el.mId === mId) {\n                return {\n                    ...el, unread: toggle ? !el.unread : false\n                }\n            }\n            return el;\n        })\n        this.syncTheData(filteredDataClone);\n    }\n\n    // DELETE MAIL\n    @action\n    deleteTheMail = (mId: string) => {\n\n        if (mId === this.selectedID) {\n            this.selectedID = \"\"\n        }\n\n        // INSERTING THE MAIL INTO DELETED FOLDER\n        let deletedMail = this.getMailData.find(el => el.mId === mId);\n        if (deletedMail) {\n            this.deletedData.push(deletedMail)\n        }\n\n        // REMOVING THE MAIL FRON THE RESPECTIVE FOLDER\n        let filteredData = this.getMailData.filter(el => el.mId !== mId);\n        this.syncTheData(filteredData);\n\n    }\n\n    // SET THE FLAGS\n    @action\n    setFlags = (mId: string) => {\n        var flagIdsClone = new Set(this.flagIds);\n        flagIdsClone.has(mId) ? flagIdsClone.delete(mId) : flagIdsClone.add(mId);\n        this.flagIds = Array.from(flagIdsClone);\n    }\n\n    // TOGGLE FLAG FILTER\n    @action\n    toggleFlagFilter = (val: boolean) => {\n        this.flagFilter = val;\n        this.selectedID = this.flagIds.includes(this.selectedID) ? this.selectedID : \"\";\n    }\n\n    // COMMON SYNCING THE FILES INTO THE RESPECTIVE FOLDERS\n    @action\n    syncTheData(data: mailStructure[]) {\n        switch (this.selectedFolder) {\n            case FOLDER_TYPES.INBOX:\n                this.inboxData = data;\n                break;\n\n            case FOLDER_TYPES.SPAM:\n                this.spamData = data;\n                break;\n\n            case FOLDER_TYPES.DELETED:\n                this.deletedData = data;\n                break;\n\n            case FOLDER_TYPES.OTHER:\n                this.otherData = data;\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    // ******** COMPUTED DATA ***********\n    // SET INBOX DATA\n    @computed\n    get getMailData() {\n        switch (this.selectedFolder) {\n\n            case FOLDER_TYPES.INBOX:\n                return toJS(this.inboxData);\n\n            case FOLDER_TYPES.SPAM:\n                return toJS(this.spamData);\n\n            case FOLDER_TYPES.DELETED:\n                return toJS(this.deletedData);\n\n            case FOLDER_TYPES.OTHER:\n                return toJS(this.otherData);\n\n            default:\n                return toJS(this.inboxData);\n        }\n    }\n\n    @computed\n    get getFilteredData() {\n        return this.getMailData.filter(el => this.flagIds.includes(el.mId))\n    }\n\n\n    @computed\n    get getUnreadCount() {\n        let inboxUnreadCount = toJS(this.inboxData).filter(el => el.unread).length;\n        let spamUnreadCount = toJS(this.spamData).filter(el => el.unread).length;\n        let deletedUnreadCount = toJS(this.deletedData).filter(el => el.unread).length;\n        let otherUnreadCount = toJS(this.otherData).filter(el => el.unread).length;\n        return [inboxUnreadCount, spamUnreadCount, deletedUnreadCount, otherUnreadCount]\n    }\n\n}\n\n","import React from 'react';\nimport { MailStore } from './MailStore';\nimport { MailContext } from './MailContext';\nimport { autorun, set, toJS } from 'mobx';\n\n// JSON Documents import\nimport inboxJSONData from './../Assets/JSONData/inbox.json';\nimport spamJSONData from './../Assets/JSONData/spam.json';\n\n// AUTO RUN - SYNCING DATA TO LOCAL STORAGE\nexport const localStorageSync = function (_this: MailStore) {\n    let firstRun = true;\n\n    // will run on change\n    autorun(() => {\n        // on load check if there's an existing store on localStorage and extend the store\n        if (firstRun) {\n            const existingStore = localStorage.getItem(\"OUTLOOK_CLONE\")\n            if (existingStore) {\n                set(_this, JSON.parse(existingStore))\n            }\n            else {\n                _this.inboxData = inboxJSONData;\n                _this.spamData = spamJSONData;\n            }\n        }\n        // from then on serialize and save to localStorage\n        localStorage.setItem(\"OUTLOOK_CLONE\", JSON.stringify(toJS(_this)));\n    })\n\n    firstRun = false\n}\n\nconst mailStoreObj = new MailStore()\n\nexport const MailProvider: React.FC<React.PropsWithChildren<{}>> = props => {\n    return <MailContext.Provider value={mailStoreObj}>\n        {props.children}\n    </MailContext.Provider>\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { MailProvider } from \"./Store/MailProvider\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <MailProvider>\n      <App />\n    </MailProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}